What do you mean by a technology?
Technology is basically an application using knowledge, tools and techniques to solve real life problems or make life easier. It can involve anything from everyday items like smartphones and cars to complex systems like AI.

What do you mean by a Domain (e.g.: AI, Web) ?
A domain refers to a specific area of expertise or knowledge within a larger field. 
E.g.: AI is a domain that focuses on creating systems capable of learning and making decisions, while Web Development is a domain focused on building websites and applications.

What is Version Control? Give some Examples.
Version control is a system that tracks changes to files, code, or documents over time. It allows multiple people to work on the same project, keeps a history of all modifications, and enables users to revert to previous versions if needed.
Example:
Git is a distributed version control system that tracks changes in files and GitHub is a cloud-based platform where Git repositories are hosted and shared online.

What is a Distributed Version Control System (DVCS)?
A Distributed Version Control System (DVCS) is a system where every developer has a complete copy of the entire repository, including its history, on their local machine. Unlike Centralized Version Control Systems (CVCS), where changes are tracked on a central server.

What do you mean by a stack?
A collection of 3 tiers of technologies i.e. collection of technologies used to build an application is called a tech stack. These technologies work together to help the app function properly and a common stack usually includes three main layers:

1. Front-end: The part of the application that users interact with directly, such as buttons, forms, and visuals.

2. Back-end: The logic and processes behind the scenes that handle user requests, process data, and execute business logic.

3. Database: A system to store, organize, and manage the application's data, such as user information or app content.

E.g.: MERN Stack is one of the most popular and in demand tech stack.

Who is a full stack developer?
A full-stack developer is a professional who is skilled in working with all layers of a tech stack, meaning they can handle the front-end, back-end, and database development needed to create a complete application.

If MERN is a stack i.e. complete enough to build an application with frontend, backend and a database, then what is HTML-CSS-JavaScript, a stack?
While MERN is a stack, meaning it includes all the layers (frontend, backend, and database) required to build a full-fledged application, HTML-CSS-JavaScript can be thought of as just the frontend layer of an application.

If we use MERN stack, that means are we not using HTML-CSS-JavaScript ?
Using the MERN stack doesn’t mean you avoid HTML, CSS, or JavaScript. In fact, these are fundamental to the MERN stack, especially on the frontend.

Instead of writing plain HTML files, React lets you use JSX (JavaScript XML). JSX looks like HTML but is written inside JavaScript.

You still use CSS to style your React components.

JavaScript is the backbone of the entire MERN stack.

What is MongoDB?
Databases are of 2 types: a)SQL b)NoSQL. MongoDB is a NoSQL database that stores data in a flexible, JSON-like format. Unlike traditional relational databases, it doesn't use tables and rows but instead uses collections and documents. It uses its own query language, which is inspired by JavaScript.

What do you mean by collections and documents?
Collections are containers for related documents. Documents are the actual records with data in a flexible structure.
e.g.: Here this is 1 collection containing 2 documents
[
  {
    "team_name": "Mumbai Indians",
    "year_founded": 2008,
    "captain": "Rohit Sharma",
    "titles_won": 5
  },
  {
    "team_name": "Chennai Super Kings",
    "year_founded": 2008,
    "captain": "MS Dhoni",
    "titles_won": 4
  }
]

What do you mean by Flexible?
Unlike traditional relational databases, where data must fit into rigid tables with specific columns and data types, MongoDB allows each document (record) to have its own structure.

What do you mean by json like format and not json format?
When we say "JSON-like format," we mean that the data stored in MongoDB resembles the structure of JSON (JavaScript Object Notation), but it may have slight differences in how it's stored or used. JSON is a text-based format, while MongoDB stores data in a binary format called BSON (Binary JSON).

What is Nodejs?
Node.js is a JavaScript runtime environment that allows developers to run JavaScript code on the server side i.e. outside the browser. It is designed for building fast and scalable server-side applications.

What is runtime environment?
A runtime environment is like a toolbox that helps your program run properly. It provides all the things your code needs to work, such as:

a) The ability to understand and execute the code.
b) Built-in features like saving files, making network requests, or handling memory.
c) A way to connect your code to the computer or device it's running on.

In the context of Node.js, the runtime environment is a platform that allows JavaScript to run on the server side, outside of a browser. It includes the core libraries, APIs, and features that enable developers to run JavaScript code on the server and interact with things like the file system, network, and databases.

E.g.:
Node.js runtime environment: Allows JavaScript to run on a server, handling backend tasks.

JavaScript runtime in a browser: Allows JavaScript to run in a web page, handling things like user interaction and updates to the page.

What is a server and what do you mean by server side?
A server is any system or device that provides resources, services, or data to other systems, devices, or clients over a network. It can indeed be a physical machine (like a laptop, drone, desktop, or large computer setup) or a virtual system in the cloud. 

The server side refers to the part of a web application that runs on a server, as opposed to the client side, which runs in the user's web browser. The server side is where all the "behind-the-scenes" work happens to make an application functional!

Where is this server side? in your computer? do we have to download it?
Yes, the server-side refers to the part of an application that runs on a server, which could be on your computer, a remote machine, or in the cloud. This is where the backend logic happens, such as processing requests, interacting with databases, and serving data to the frontend.

When you run a local server using Node.js, your computer handles requests and responds to them. This is called running a local development server. Most real applications use remote servers hosted on cloud services like AWS, Heroku, or DigitalOcean.

Differences in running in a browser runtime environment and node runtime environment?
Browser:
1. Runs in a web browser (like Chrome, Firefox, Safari).
2. Designed to handle web page-related tasks like rendering HTML, styling with CSS, and executing JavaScript code.
3. Executes client-side JavaScript, handling user interactions, dynamic updates to the webpage, and rendering content for the user.
4. The browser can make HTTP requests to a server via AJAX or the Fetch API but cannot directly interact with the file system or the server-side logic.
5. JavaScript in the browser is single-threaded, meaning it processes one task at a time. However, browsers handle asynchronous tasks (like HTTP requests) through mechanisms like callbacks, Promises, and async/await.


Node:
1. Runs outside the browser, usually on a server or your local machine.
2. Handles backend tasks, such as reading files, interacting with databases, and handling HTTP requests.
3. Executes server-side JavaScript, enabling backend functionality like processing requests, managing databases, file system operations, and sending responses to clients.
4. Node.js can make HTTP requests (like a client) but also create its own server and handle incoming HTTP requests, manage user sessions, and directly communicate with databases.
5. Node.js uses event-driven, non-blocking I/O. It’s designed for handling many simultaneous connections (great for real-time applications) with a single-threaded event loop, making it highly scalable for server-side tasks.

Why to use a server if we can use simple HTML, CSS and JavaScript to build apps?
1. To Access The Node Runtime Environment.

2. HTML, CSS, and JavaScript can display fixed information, but they cannot generate new or personalized content based on user input. A server enables the app to process user requests, fetch specific data (like search results or user profiles), and deliver dynamic content tailored to each user. For example, a server can display your unique dashboard when you log into an account.

3. Static apps are limited in their ability to fetch or process data from external services. Servers make it possible to integrate APIs like weather updates, payment gateways, or third-party tools. They act as intermediaries, fetching and processing external data for the app.

What is Port Number?
A port number is a logical identifier for specific network services on a server. It allows a server to run multiple services on the same IP address. For example, port 80 is used for HTTP, and port 443 is used for HTTPS. On websites like Amazon, the port is usually 443 for secure browsing. When you click on a "Books" link, the port does not change — only the URL path changes.

What is Express?
It is a web application framework for Node.js that simplifies building and handling server-side applications. It helps manage routes, handle HTTP requests, and respond to client queries, making it easier to build APIs and web servers.

What is an API?
An API (Application Programming Interface) is a tool that allows different applications to interact and share functionality. For example, Zomato uses the Google Maps API to display maps in their app. The API provides only the needed features, like showing locations, without giving access to the entire Google Maps database. Another example would be a travelling service using API to get the timings of several Airlines.

What are get, post, put, delete, and patch in API calls?
In the context of APIs, GET, POST, PUT, DELETE, and PATCH are HTTP methods used to define different types of actions or operations that can be performed on resources. These are part of the HTTP protocol that APIs use for communication.

GET - Retrieve Data e.g.: Fetching a user's details
POST - Send data to create a resource e.g.: Creating a new user
PUT - Update an entire resource e.g.: Updating a user profile
DELETE - Remove a resource e.g.: Deleting a user
PATCH - Partially update a resource e.g.: Updating just the user's email address

What do you mean by HTTP Protocol?
The HTTP (Hyper Text Transfer Protocol) is the protocol used by the web to transfer data between clients and servers. It defines how requests and responses are structured and how data is transmitted over the internet. HTTP defines a set of rules and conventions for how this communication happens, and is fundamental to the web. It's like the language that your browser and the server use to communicate.

What do you mean by HTTP Methods?
HTTP Methods (also called HTTP Verbs) are actions that define what you want to do with a resource on the server. Each method represents a different type of action you want to perform on the resource.

What is a framework?
A framework is a pre-built collection of tools, libraries, and guidelines that provides a foundation for building applications. It helps developers by offering structure and reusable components, saving time and effort in coding.

Then what is the difference between a frame work like express and a library like numpy?
Framework:
1. A framework dictates the structure and flow of your application.
2. Provides a complete structure to build an app.
3. Less flexible due to predefined structure.
4. Framework calls your code.
E.g.: Express.js, Angular, Django

Library:
1. A library gives you tools or functions to call as needed in your program. You control when and how to use the library within your code.
2. Provides tools/functions to perform specific tasks.
3. More flexible, you use what you need.
4. You call the library's functions.
E.g.: NumPy, React, jQuery

What is flask, a library or a framework?
Flask is a framework.

It is a micro-framework for building web applications in Python. Flask provides the basic tools and structure for handling HTTP requests, routing, and creating web applications.

What is difference between micro-framework and framework?
Micro-Framework:
1. Lightweight and minimal.
2. Provides only essential features (e.g., routing, request handling).
3. Highly flexible, allowing developers to choose additional features.
E.g.: Flask, Express.js

Framework:
1. Larger and more feature-rich.
2. Provides a comprehensive set of built-in features (e.g., authentication, database handling).
3. Less flexible, with predefined structure and rules.
E.g.: Django, Ruby on Rails

What is React?
ReactJS is a JavaScript library used for building user interfaces, particularly single-page applications. It runs on the client-side (in the browser) to render data dynamically and it has access to various resources like JavaScript, images, CSS, and other assets. These static files are usually hosted separately on a static server or Content Delivery Network (CDN). React allows developers to build reusable UI components, making the development of complex UIs easier and more efficient.

What is CDN?
A Content Delivery Network (CDN) is a network of servers placed in different locations around the world also called edge servers. The content you access (like images, videos, or websites) is stored on multiple servers across these regions.

What do you mean by render data dynamically?
"Render data dynamically" means displaying or updating content on a webpage based on user interactions, changes in data, or other events, without needing to reload the entire page.

Example:
If you're on a social media site and you "like" a post, instead of refreshing the entire page to show the updated like count, the page dynamically updates that specific post's like count. This is dynamic rendering of data.

How has React Affected the development process?
React has significantly impacted the development process by enabling more dynamic and efficient front-end development, which shifts 'some' responsibilities from the backend to the frontend in terms of handling interactions, UI updates and reducing the need for frequent server requests.

Why use MERN Stack?
1. As per Client's Requirements.

2. The MERN Stack is popular because it uses JavaScript for both the front-end and back-end. This allows for faster development and better communication between components since everything is in the same language. It's also highly efficient for building interactive and data-driven websites. With each technology in the stack optimizing performance and scalability is much easier.

How does MERN Stack work together?
The MERN stack integrates four key technologies to build full-stack web applications. MongoDB serves as the database, storing all application data in JSON-like format. On the server side, Node.js acts as the runtime environment that runs JavaScript and manages backend logic. Express, creates APIs that handle requests from the frontend or other services. These APIs fetch or update data in MongoDB and send responses back to the frontend. The frontend is powered by React, which dynamically renders the user interface (UI) in the browser. React communicates with the backend server using APIs to fetch or send data. A user only interacts with the UI, which fetches and displays data provided by the server, making the app dynamic and interactive. Together, these technologies create a seamless workflow for building scalable, interactive web applications.

Can we make the react components to run on the node server?
Yes, React components can run on a Node.js server through a process called Server-Side Rendering (SSR). This involves rendering React components on the server instead of (or in addition to) the browser. The output of this process is plain HTML, which is sent to the browser for faster initial page load and better SEO.

Now if the react components that would be running in node server will they be given to the browser runtime environment to run also? how exactly does it work?

1. React Component Renders on the Server:

The server (running Node.js) renders the React components into plain HTML. This HTML is sent as part of the HTTP response to the client (browser).

The browser receives the HTML and immediately displays it. This is a fast initial load because the browser doesn't have to wait for JavaScript to execute before showing content.

Browser Request --> Node.js (React SSR) --> Sends Pre-Rendered HTML

2. JavaScript and React Hydration:

Along with the HTML, the server also includes links to JavaScript bundles that are part of the React app. These bundles are downloaded by the browser.
When the browser runs this JavaScript, React "hydrates" the HTML by attaching React's virtual DOM and event listeners to the existing DOM structure.
After hydration, the React app becomes interactive.

Browser Receives HTML --> Downloads JavaScript Bundles --> React Hydrates UI

3. Future Updates Are Client-Side:

Once hydration is complete, React takes over and operates as a regular client-side app. Further updates or interactions are handled in the browser using React's usual client-side rendering process.

User Interacts --> React Updates DOM (Client-Side Only)

What is React Hydration?
React Hydration is the process where React "reuses" the server-rendered HTML and makes it interactive in the browser. It is a key part of Server-Side Rendering (SSR) workflows, ensuring the app is fast to load while also becoming dynamic for user interactions.

Axios vs Fetch?
JavaScript Object to JSON?
How does the request and response exactly work?
